#!/bin/bash

echo "üß™ Teste de Integra√ß√£o - Busca Sem√¢ntica MIT Logistics"
echo "======================================================"

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "\n${BLUE}üì° Testando Backend API...${NC}"
if curl -s http://localhost:8001/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Backend OK (http://localhost:8001)${NC}"
else
    echo -e "${RED}‚ùå Backend n√£o est√° respondendo${NC}"
    exit 1
fi

echo -e "\n${BLUE}üé® Testando Frontend...${NC}"
if curl -s http://localhost:8081 > /dev/null; then
    echo -e "${GREEN}‚úÖ Frontend OK (http://localhost:8081)${NC}"
else
    echo -e "${RED}‚ùå Frontend n√£o est√° respondendo${NC}"
fi

echo -e "\n${BLUE}üîç Testando Busca Sem√¢ntica...${NC}"

# Teste 1: Endpoint de documentos sem filtros
echo -n "Documentos sem filtros: "
DOCS_COUNT=$(curl -s "http://localhost:8001/api/frontend/documents" | jq '.data | length')
if [ "$DOCS_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ $DOCS_COUNT documentos encontrados${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Nenhum documento (usando mocks)${NC}"
fi

# Teste 2: Busca tradicional
echo -n "Busca Tradicional: "
RESPONSE=$(curl -s "http://localhost:8001/api/frontend/documents?search=carga&semantic_search=false")
METHOD=$(echo "$RESPONSE" | jq -r '.search_metadata.method')
COUNT=$(echo "$RESPONSE" | jq '.data | length')
echo -e "${BLUE}$METHOD - $COUNT resultados${NC}"

# Teste 3: Busca sem√¢ntica
echo -n "Busca Sem√¢ntica: "
RESPONSE=$(curl -s "http://localhost:8001/api/frontend/documents?search=carga&semantic_search=true")
METHOD=$(echo "$RESPONSE" | jq -r '.search_metadata.method')
COUNT=$(echo "$RESPONSE" | jq '.data | length')
EMBEDDING_SIZE=$(echo "$RESPONSE" | jq '.search_metadata.query_embedding_size // 0')

if [ "$METHOD" = "semantic_vector_search" ]; then
    echo -e "${GREEN}‚úÖ $METHOD - Embedding: ${EMBEDDING_SIZE}D - $COUNT resultados${NC}"
else
    FALLBACK=$(echo "$RESPONSE" | jq -r '.search_metadata.fallback_reason // "N/A"')
    echo -e "${YELLOW}‚ö†Ô∏è Fallback: $FALLBACK${NC}"
fi

echo -e "\n${BLUE}ü§ñ Testando Chat IA...${NC}"
CHAT_RESPONSE=$(curl -s -X POST http://localhost:8001/api/frontend/chat/message \
  -H "Content-Type: application/json" \
  -d '{"message":"Consultar CT-e da carga ABC123", "user_context":{"name":"Test","company":"MIT"}}')

CHAT_MESSAGE=$(echo "$CHAT_RESPONSE" | jq -r '.data.message // "Erro"')
if echo "$CHAT_MESSAGE" | grep -q "documento\|sem√¢ntica\|tradicional"; then
    echo -e "${GREEN}‚úÖ Chat respondeu com contexto log√≠stico${NC}"
    echo -e "   üí¨ Resposta: ${CHAT_MESSAGE:0:80}..."
else
    echo -e "${YELLOW}‚ö†Ô∏è Chat funcionando mas sem contexto espec√≠fico${NC}"
fi

echo -e "\n${BLUE}üìä Estat√≠sticas Finais:${NC}"
echo "‚Ä¢ Busca Sem√¢ntica: $METHOD"
echo "‚Ä¢ Embeddings: ${EMBEDDING_SIZE}D (768=Gemini, 1536=OpenAI)"  
echo "‚Ä¢ Documentos encontrados: $COUNT"
echo "‚Ä¢ Chat IA: Funcional"

echo -e "\n${GREEN}üéâ Integra√ß√£o testada!${NC}"
echo ""
echo -e "${BLUE}üåê Acesse o sistema:${NC}"
echo "‚Ä¢ Frontend: http://localhost:8081"
echo "‚Ä¢ API Docs: http://localhost:8001/docs"
echo "‚Ä¢ Chat com IA: http://localhost:8081 (aba 'Chat Inteligente')"
echo ""
echo -e "${BLUE}üîç Testar Busca Sem√¢ntica:${NC}"
echo "1. Acesse http://localhost:8081"
echo "2. V√° em 'Chat Inteligente'"
echo "3. Clique em 'Consultar Documentos'" 
echo "4. Digite uma busca e ative o toggle 'IA Sem√¢ntica'"
echo "5. Compare resultados com/sem IA sem√¢ntica"