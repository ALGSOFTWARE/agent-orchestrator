#!/usr/bin/env tsx

import dotenv from 'dotenv';
import { MITTrackingAgent } from '@/agents/MITTrackingAgent';
import type { LogisticsQuery, DocumentType } from '@/types';

// Carrega vari√°veis de ambiente
dotenv.config();

async function main(): Promise<void> {
  try {
    console.log('üöÄ Iniciando MIT Tracking - Agente Conversacional de Log√≠stica...\n');

    const agent = new MITTrackingAgent();
    
    console.log('‚úÖ Agente MIT Tracking inicializado com sucesso!');
    console.log('üéØ Especializa√ß√£o: Consultas de CT-e, rastreamento de containers e log√≠stica\n');
    
    // Consulta de demonstra√ß√£o tipada
    const consultaDemo: LogisticsQuery = {
      content: `Preciso consultar o status do meu CT-e n√∫mero 351234567890123456789012345678901234. 
                Onde posso encontrar informa√ß√µes sobre esta carga e qual o ETA previsto?
                         
                Forne√ßa uma resposta profissional e t√©cnica, explicando:
                1. Como consultar CT-e no sistema MIT Tracking
                2. Tipos de informa√ß√µes dispon√≠veis 
                3. Como interpretar status de carga
                4. Processo para obter ETA/ETD atualizados`,
      type: 'CTE' as DocumentType,
      documentNumber: '351234567890123456789012345678901234',
      timestamp: new Date()
    };

    console.log('üìã Executando consulta de demonstra√ß√£o sobre CT-e...\n');
    
    const agentResponse = await agent.processLogisticsQuery(consultaDemo);
    
    console.log('üéØ Resposta do Assistente MIT Tracking:');
    console.log('='.repeat(50));
    console.log(agentResponse.content);
    console.log('='.repeat(50));
    
    console.log(`\nüìä M√©tricas da consulta:`);
    console.log(`   ‚Ä¢ Tempo de resposta: ${agentResponse.responseTime}ms`);
    console.log(`   ‚Ä¢ Confian√ßa: ${(agentResponse.confidence * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Fontes: ${agentResponse.sources?.join(', ') || 'N/A'}`);
    
    console.log('\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!');
    console.log('üîÑ O agente est√° pronto para consultas de CT-e, BL, containers e log√≠stica.');

    // Exemplos de consultas interativas
    console.log('\nüìù Exemplos de consultas que voc√™ pode fazer:');
    console.log('- "Onde est√° o meu BL?"');
    console.log('- "Me mostre o CT-e da carga X"');
    console.log('- "Qual o status da minha entrega?"');
    console.log('- "CT-e n√∫mero [n√∫mero espec√≠fico]"');
    
    // Mostra estat√≠sticas finais
    console.log(`\nüìà Estat√≠sticas da sess√£o:`);
    console.log(`   ‚Ä¢ ID da sess√£o: ${agent.getSessionId()}`);
    console.log(`   ‚Ä¢ Estado do agente: ${agent.getState()}`);
    console.log(`   ‚Ä¢ Taxa de sucesso: ${agent.successRate.toFixed(1)}%`);
    console.log(`   ‚Ä¢ Hist√≥rico: ${agent.getHistoryLength()} mensagens`);

    await agent.shutdown();
    
  } catch (error) {
    console.error('‚ùå Erro ao executar o agente MIT Tracking:', error instanceof Error ? error.message : error);
    console.error('üìã Detalhes do erro:', error instanceof Error ? error.stack : 'Erro desconhecido');
    
    if (error instanceof Error && (error.message.includes('ECONNREFUSED') || error.message.includes('fetch'))) {
      console.log('\nüîß Poss√≠veis solu√ß√µes:');
      console.log('1. Verifique se o Ollama est√° rodando: ollama serve');
      console.log('2. Confirme se o modelo llama3.2:3b est√° dispon√≠vel: ollama list');
      console.log('3. Teste a conex√£o: curl http://localhost:11434/api/tags');
    }
    
    process.exit(1);
  }
}

// Executa o programa
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error('Erro fatal:', error);
    process.exit(1);
  });
}