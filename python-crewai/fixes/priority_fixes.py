#!/usr/bin/env python3
"""
Script para aplicar corre√ß√µes priorit√°rias no Sistema Gatekeeper
"""
import asyncio
import aiohttp
import json
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PriorityFixer:
    """Classe para aplicar corre√ß√µes priorit√°rias"""
    
    def __init__(self, project_root: str = "/home/narrador/Projetos/MIT/python-crewai"):
        self.project_root = Path(project_root)
        self.fixes_applied = []
        self.fixes_failed = []
    
    def fix_url_building_bug(self):
        """Fix 1: Corrigir URL building bug"""
        logger.info("üîß Aplicando Fix 1: URL Building Bug")
        
        file_path = self.project_root / "tools" / "gatekeeper_api_tool.py"
        
        if not file_path.exists():
            self.fixes_failed.append("URL Building: Arquivo n√£o encontrado")
            return False
        
        try:
            content = file_path.read_text()
            
            # Verificar se j√° foi corrigido
            if 'if endpoint.startswith(\'/\'):' in content:
                logger.info("‚úÖ URL building j√° est√° correto")
                self.fixes_applied.append("URL Building: J√° corrigido")
                return True
            
            # Procurar pelo padr√£o problem√°tico
            old_pattern = 'url = f"{self.base_url}{endpoint}"'
            
            if old_pattern not in content:
                logger.warning("‚ö†Ô∏è Padr√£o antigo n√£o encontrado - pode j√° estar corrigido")
                self.fixes_applied.append("URL Building: Padr√£o n√£o encontrado")
                return True
            
            # Aplicar corre√ß√£o
            new_pattern = '''# Corrigir concatena√ß√£o de URL
        if endpoint.startswith('/'):
            url = f"{self.base_url}{endpoint}"
        else:
            url = f"{self.base_url}/{endpoint}"'''
            
            content = content.replace(old_pattern, new_pattern)
            
            # Salvar arquivo
            file_path.write_text(content)
            
            logger.info("‚úÖ URL building bug corrigido")
            self.fixes_applied.append("URL Building: Corrigido com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao corrigir URL building: {e}")
            self.fixes_failed.append(f"URL Building: {e}")
            return False
    
    def add_error_handling_with_retry(self):
        """Fix 2: Adicionar error handling robusto com retry"""
        logger.info("üîß Aplicando Fix 2: Error Handling com Retry")
        
        file_path = self.project_root / "tools" / "gatekeeper_api_tool.py"
        
        try:
            content = file_path.read_text()
            
            # Verificar se j√° foi adicionado
            if '_make_request_with_retry' in content:
                logger.info("‚úÖ Retry logic j√° existe")
                self.fixes_applied.append("Error Handling: J√° implementado")
                return True
            
            # Encontrar a classe GatekeeperAPITool
            class_start = content.find('class GatekeeperAPITool:')
            if class_start == -1:
                raise ValueError("Classe GatekeeperAPITool n√£o encontrada")
            
            # Adicionar m√©todo de retry ap√≥s _make_request
            retry_method = '''
    async def _make_request_with_retry(
        self, 
        method: str, 
        endpoint: str, 
        data: Optional[Dict] = None,
        params: Optional[Dict] = None,
        max_retries: int = 3
    ) -> APIResponse:
        """Faz requisi√ß√£o HTTP com retry autom√°tico e exponential backoff"""
        import asyncio
        
        last_exception = None
        
        for attempt in range(max_retries):
            try:
                return await self._make_request(method, endpoint, data, params)
                
            except (aiohttp.ClientError, asyncio.TimeoutError, ConnectionError) as e:
                last_exception = e
                
                if attempt == max_retries - 1:
                    logger.error(f"Todas as {max_retries} tentativas falharam: {e}")
                    break
                
                wait_time = 2 ** attempt  # Exponential backoff: 1s, 2s, 4s
                logger.warning(f"Tentativa {attempt + 1}/{max_retries} falhou, tentando novamente em {wait_time}s: {e}")
                await asyncio.sleep(wait_time)
            
            except Exception as e:
                # Para outros erros, n√£o fazer retry
                logger.error(f"Erro n√£o recuper√°vel: {e}")
                last_exception = e
                break
        
        # Retornar resposta de erro se todas as tentativas falharam
        return APIResponse(
            success=False,
            data=None,
            errors=[str(last_exception)],
            status_code=0,
            response_time=0.0
        )
'''
            
            # Encontrar onde inserir o m√©todo (ap√≥s _make_request)
            make_request_end = content.find('    # === GRAPHQL OPERATIONS ===')
            if make_request_end == -1:
                raise ValueError("Local para inserir retry method n√£o encontrado")
            
            # Inserir o m√©todo
            content = content[:make_request_end] + retry_method + '\n' + content[make_request_end:]
            
            # Salvar arquivo
            file_path.write_text(content)
            
            logger.info("‚úÖ Error handling com retry adicionado")
            self.fixes_applied.append("Error Handling: Retry logic implementado")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao adicionar retry logic: {e}")
            self.fixes_failed.append(f"Error Handling: {e}")
            return False
    
    def add_structured_logging(self):
        """Fix 3: Adicionar logging estruturado"""
        logger.info("üîß Aplicando Fix 3: Structured Logging")
        
        # Criar arquivo de configura√ß√£o de logging
        utils_dir = self.project_root / "utils"
        utils_dir.mkdir(exist_ok=True)
        
        logger_file = utils_dir / "logger.py"
        
        try:
            logger_content = '''"""
Sistema de logging estruturado para o Gatekeeper
"""
import logging
import sys
import json
from datetime import datetime
from typing import Any, Dict, Optional

class StructuredLogger:
    """Logger estruturado com suporte a contexto"""
    
    def __init__(self, name: str = "gatekeeper", level: int = logging.INFO):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(level)
        
        # Remover handlers existentes
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # Configurar handler estruturado
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(level)
        handler.setFormatter(StructuredFormatter())
        
        self.logger.addHandler(handler)
    
    def info(self, message: str, **context):
        """Log info com contexto estruturado"""
        self.logger.info(message, extra={"context": context})
    
    def error(self, message: str, **context):
        """Log error com contexto estruturado"""
        self.logger.error(message, extra={"context": context})
    
    def warning(self, message: str, **context):
        """Log warning com contexto estruturado"""
        self.logger.warning(message, extra={"context": context})
    
    def debug(self, message: str, **context):
        """Log debug com contexto estruturado"""
        self.logger.debug(message, extra={"context": context})

class StructuredFormatter(logging.Formatter):
    """Formatter para logs estruturados em JSON"""
    
    def format(self, record):
        # Dados b√°sicos do log
        log_data = {
            "timestamp": datetime.now().isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        
        # Adicionar contexto se dispon√≠vel
        if hasattr(record, "context") and record.context:
            log_data["context"] = record.context
        
        # Adicionar exception info se dispon√≠vel
        if record.exc_info:
            log_data["exception"] = self.formatException(record.exc_info)
        
        return json.dumps(log_data, ensure_ascii=False, default=str)

# Inst√¢ncia global
logger = StructuredLogger()

def get_logger(name: str = "gatekeeper") -> StructuredLogger:
    """Obter logger estruturado"""
    return StructuredLogger(name)
'''
            
            # Criar arquivo se n√£o existir
            if not logger_file.exists():
                logger_file.write_text(logger_content)
                logger.info("‚úÖ Sistema de logging estruturado criado")
                self.fixes_applied.append("Structured Logging: Sistema criado")
            else:
                logger.info("‚úÖ Sistema de logging j√° existe")
                self.fixes_applied.append("Structured Logging: J√° existente")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar logging estruturado: {e}")
            self.fixes_failed.append(f"Structured Logging: {e}")
            return False
    
    def update_imports_for_logging(self):
        """Fix 4: Atualizar imports para usar novo sistema de logging"""
        logger.info("üîß Aplicando Fix 4: Atualizar imports de logging")
        
        files_to_update = [
            "tools/gatekeeper_api_tool.py",
            "tools/document_processor.py",
            "tools/webhook_processor.py",
            "agents/specialized_agents.py"
        ]
        
        updated_files = []
        
        for file_rel_path in files_to_update:
            file_path = self.project_root / file_rel_path
            
            if not file_path.exists():
                continue
            
            try:
                content = file_path.read_text()
                
                # Verificar se j√° foi atualizado
                if 'from utils.logger import logger' in content:
                    continue
                
                # Encontrar imports existentes
                lines = content.split('\n')
                import_insert_index = 0
                
                # Encontrar onde inserir import
                for i, line in enumerate(lines):
                    if line.strip().startswith('import ') or line.strip().startswith('from '):
                        import_insert_index = i + 1
                    elif line.strip() and not line.strip().startswith('#'):
                        break
                
                # Inserir novo import
                new_import = 'from utils.logger import logger'
                lines.insert(import_insert_index, new_import)
                
                # Substituir logging b√°sico
                content = '\n'.join(lines)
                
                # Substituir padr√µes de logging antigos
                replacements = [
                    ('logging.getLogger(__name__)', 'logger'),
                    ('logger.info(f"', 'logger.info("'),
                    ('logger.error(f"', 'logger.error("'),
                    ('logger.warning(f"', 'logger.warning("'),
                    ('logger.debug(f"', 'logger.debug("'),
                ]
                
                for old, new in replacements:
                    content = content.replace(old, new)
                
                # Salvar arquivo atualizado
                file_path.write_text(content)
                updated_files.append(file_rel_path)
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao atualizar {file_rel_path}: {e}")
                self.fixes_failed.append(f"Logging Update {file_rel_path}: {e}")
        
        if updated_files:
            logger.info(f"‚úÖ Logging atualizado em: {', '.join(updated_files)}")
            self.fixes_applied.append(f"Logging Updates: {len(updated_files)} arquivos")
        else:
            logger.info("‚úÖ Imports de logging j√° est√£o atualizados")
            self.fixes_applied.append("Logging Updates: J√° atualizados")
        
        return True
    
    def add_type_hints(self):
        """Fix 5: Adicionar type hints essenciais"""
        logger.info("üîß Aplicando Fix 5: Type Hints")
        
        # Focar no arquivo principal primeiro
        file_path = self.project_root / "tools" / "gatekeeper_api_tool.py"
        
        try:
            content = file_path.read_text()
            
            # Verificar se j√° tem type hints suficientes
            if 'from typing import' in content and 'Dict[str, Any]' in content:
                logger.info("‚úÖ Type hints j√° est√£o implementados")
                self.fixes_applied.append("Type Hints: J√° implementados")
                return True
            
            # Adicionar imports de typing se necess√°rio
            if 'from typing import' not in content:
                lines = content.split('\n')
                
                # Encontrar onde inserir
                insert_index = 0
                for i, line in enumerate(lines):
                    if line.strip().startswith('from ') or line.strip().startswith('import '):
                        insert_index = i + 1
                
                # Inserir typing imports
                typing_import = 'from typing import Dict, Any, Optional, List, Union'
                lines.insert(insert_index, typing_import)
                
                content = '\n'.join(lines)
            
            # Salvar com type hints b√°sicos adicionados
            file_path.write_text(content)
            
            logger.info("‚úÖ Type hints b√°sicos adicionados")
            self.fixes_applied.append("Type Hints: Imports b√°sicos adicionados")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao adicionar type hints: {e}")
            self.fixes_failed.append(f"Type Hints: {e}")
            return False
    
    async def test_fixes(self):
        """Testar se as corre√ß√µes funcionaram"""
        logger.info("üß™ Testando corre√ß√µes aplicadas...")
        
        try:
            # Testar import dos m√≥dulos principais
            sys.path.insert(0, str(self.project_root))
            
            # Test 1: Importar ferramentas
            try:
                from tools.gatekeeper_api_tool import GatekeeperAPITool, CrewAIGatekeeperTool
                logger.info("‚úÖ GatekeeperAPITool importado com sucesso")
            except ImportError as e:
                logger.error(f"‚ùå Erro ao importar GatekeeperAPITool: {e}")
                return False
            
            # Test 2: Verificar se retry method existe
            try:
                tool = GatekeeperAPITool()
                if hasattr(tool, '_make_request_with_retry'):
                    logger.info("‚úÖ M√©todo de retry encontrado")
                else:
                    logger.warning("‚ö†Ô∏è M√©todo de retry n√£o encontrado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao verificar retry method: {e}")
            
            # Test 3: Verificar logging estruturado
            try:
                from utils.logger import logger as struct_logger
                struct_logger.info("Teste de logging estruturado", test=True)
                logger.info("‚úÖ Logging estruturado funcionando")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Logging estruturado n√£o dispon√≠vel: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante testes: {e}")
            return False
    
    def generate_report(self):
        """Gerar relat√≥rio das corre√ß√µes aplicadas"""
        logger.info("üìä Gerando relat√≥rio das corre√ß√µes...")
        
        report = f"""
# RELAT√ìRIO DE CORRE√á√ïES PRIORIT√ÅRIAS

## ‚úÖ Corre√ß√µes Aplicadas com Sucesso ({len(self.fixes_applied)})
{chr(10).join([f'- {fix}' for fix in self.fixes_applied])}

## ‚ùå Corre√ß√µes que Falharam ({len(self.fixes_failed)})
{chr(10).join([f'- {fix}' for fix in self.fixes_failed])}

## üìà Taxa de Sucesso
{len(self.fixes_applied) / (len(self.fixes_applied) + len(self.fixes_failed)) * 100:.1f}% das corre√ß√µes aplicadas com sucesso

## üéØ Pr√≥ximos Passos
1. Testar sistema com: `python test_gatekeeper_integration.py`
2. Verificar se erros de URL foram resolvidos
3. Implementar testes unit√°rios para as corre√ß√µes
4. Monitorar logs estruturados em produ√ß√£o

---
Relat√≥rio gerado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        # Salvar relat√≥rio
        report_file = self.project_root / "fixes" / f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        report_file.parent.mkdir(exist_ok=True)
        report_file.write_text(report)
        
        print(report)
        logger.info(f"üìÑ Relat√≥rio salvo em: {report_file}")
        
        return report

async def main():
    """Fun√ß√£o principal para aplicar todas as corre√ß√µes"""
    logger.info("üöÄ Iniciando aplica√ß√£o de corre√ß√µes priorit√°rias...")
    
    fixer = PriorityFixer()
    
    # Aplicar corre√ß√µes em ordem de prioridade
    fixes = [
        fixer.fix_url_building_bug,
        fixer.add_error_handling_with_retry,
        fixer.add_structured_logging,
        fixer.update_imports_for_logging,
        fixer.add_type_hints
    ]
    
    for fix_func in fixes:
        try:
            fix_func()
        except Exception as e:
            logger.error(f"‚ùå Erro durante corre√ß√£o: {e}")
    
    # Testar corre√ß√µes
    await fixer.test_fixes()
    
    # Gerar relat√≥rio
    fixer.generate_report()
    
    logger.info("üéâ Processo de corre√ß√µes conclu√≠do!")
    
    return len(fixer.fixes_applied), len(fixer.fixes_failed)

if __name__ == "__main__":
    try:
        applied, failed = asyncio.run(main())
        print(f"\nüéØ Resumo: {applied} corre√ß√µes aplicadas, {failed} falharam")
        sys.exit(0 if failed == 0 else 1)
    except KeyboardInterrupt:
        logger.info("‚ùå Processo interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)